init#pragma rtGlobals=1		// Use modern global access method.// DMM Procedures// Nik and Elyjah 8/17// Async support added by Christian Olsen, May 2018// Visa init: Use initeverything()////////////////////////// Init mode /////////////////////////function  InitDMMdcvolts(instID, range, linecycles)	// setup dmm to take dc voltage readings	Variable instID, range, linecycles	// Ranges: 0.1, 1, 10, 100, 1000V 	// Linecycles: 0.02, 0.2, 1, 10, 100 (60Hz cycles)		// autozero off (set in this function) with 1NPLC gives 5.5 digits of resolution 	// according to the manual	// this is a pretty good default and makes the read time comparable to an srs830		WriteHP("*RSTrea",instID)	sc_sleep(0.05)	WriteHP("*CLS",instID)	sc_sleep(0.05)	WriteHP("conf:volt:dc " + num2str(range),instID)	sc_sleep(0.05)	WriteHP("zero:auto off",instID)	sc_sleep(0.05)	WriteHP("volt:dc:nplc " + num2str(linecycles),instID)end///////////////////////// Utility //////////////////////////function/s GetDMMIDN(instID)	variable instID		return QueryHP("*IDN?",instID)endfunction ReadDMMjunk(instID)	// for those times when your dmm gpib got messed up and there's something in the buffer, and	// your scans are always off by some buffered reading... call this procedure.	variable instID	string response	variable i=0		do		VisaRead/Q/T="\n\r" instID, response		i+=1	while(v_flag > 0)	printf "this read %d characters of junk \r", i-1endfunction ErrorsDMM(instID)	variable instID	string response	variable i=1		do		response = QueryHP("SYST:ERR?",instID)		print num2str(i) + ":  " + response		if(stringmatch(response[0,1],"+0")==1 || i>9)			break		endif		i+=1	while(1==1)endfunction SetSpeedDMM(instID, speed)	variable instID, speed	string linecycles="1"		if (speed == -2)		linecycles = ".02"	elseif (speed == -1)		linecycles = ".2"	elseif (speed == 0)		linecycles = "1"	elseif (speed == 1)		linecycles = "10"	elseif (speed == 2)		linecycles = "100"	endif		WriteHP("volt:dc:nplc "+linecycles,instID)Endfunction/s checkDMMconfig(instID)	variable instID		return QueryHP("CONF?",instID)end// more fun than useful!function SetTextDMM(instID, text)	variable instID	string text		sprintf text, ":DISP:TEXT '%s'", text	WriteHP(text,instID)end///////////////////////////////// Sync get functions ////////////////////////////////function ReadDMM(instID)	Variable instID	string response		response = QueryHP("READ?",instID)	return str2num(response)end///////////////////////////////// Async get functions ////////////////////////////////threadsafe function ReadDMM_Async(datafolderID)	string datafolderID	string response		// get instrument ID from datafolder	DFREF dfr = ThreadGroupGetDFR(0,inf)	setdatafolder dfr	nvar instID = $(":"+datafolderID+":instID")	killdatafolder dfr // We don't need the datafolder anymore!		response = QueryHP("READ?",InstID)	return str2num(response)end///////////////////////////// Status function ////////////////////////////function/s GetDMMStatus(instID)	variable instID	string  buffer = ""		string gpib = num2istr(instGPIB(instID))	buffer = addJSONKeyVal(buffer, "gpib_address", strVal=gpib)	// get configuration	string config = TrimString(checkDMMconfig(instID))	variable i=0	do		if(CmpStr(config[i], "+")==0 || CmpStr(config[i], "-")==0)			break		endif		i+=1	while(i<strlen(config))	buffer = addJSONKeyVal(buffer, "units", strVal=TrimString(config[1,i-1]), addQuotes=1)	buffer = addJSONKeyVal(buffer, "range", numVal=str2num(StringFromList(0, config[i,strlen(config)-2],",")), fmtNum="%.3f")	buffer = addJSONKeyVal(buffer, "resolution", numVal=str2num(StringFromList(1, config[i,strlen(config)-2],",")), fmtNum="%.3e")		return addJSONKeyVal("", "HP34401A_"+gpib, strVal=buffer)end//////////////////////////////// VISA communication ///////////////////////////////threadsafe function WriteHP(cmd,instID)	string cmd	variable instID		cmd = cmd+"\n"	VisaWrite instID, cmdendthreadsafe function/s ReadHP(instID)	variable instID	string response		VisaRead/T="\n\r" instID, response	return responseendthreadsafe function/s QueryHP(cmd,instID)	string cmd	variable instID		WriteHP(cmd,instID)	return ReadHP(instID)end